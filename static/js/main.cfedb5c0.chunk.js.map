{"version":3,"sources":["components/ToDo.js","store/Actions.js","components/List.js","store/Reducer.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","useState","todo","setTodo","dispatch","useDispatch","onSubmit","e","preventDefault","trim","type","payload","addTodoAction","addTodo","id","uuid","name","complete","className","placeholder","value","onChange","target","List","todos","useSelector","state","toggleTodo","todoId","toggleTodoDone","deleteTodo","deleteTodoAction","map","key","checked","done","bind","onClick","initState","Reducer","action","filter","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAwCeA,EAnCF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAEXC,EAAWC,cAiBjB,OACE,0BAAMC,SAZS,SAACC,GAChBA,EAAEC,iBACkB,KAAhBN,EAAKO,UAPK,SAACP,GAASE,ECRC,SAACF,GAAD,MAAW,CACtCQ,KAAM,WACNC,QAAST,GDM0BU,CAAcV,IAQ/CW,CAAQ,CACNC,GAAIC,cACJC,KAAMd,EACNe,UAAU,IAEZd,EAAQ,OAKN,yBAAKe,UAAU,YACb,2BACER,KAAK,OACLM,KAAK,OACLG,YAAY,aACZC,MAAOlB,EACPmB,SAtBS,SAACd,GAChBJ,EAAQI,EAAEe,OAAOF,UAuBb,4BAAQV,KAAK,UAAb,UEGOa,EAjCF,WACX,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAErCpB,EAAWC,cAEXsB,EAAa,SAACC,GAAD,OAAYxB,EDJH,SAACwB,GAAD,MAAa,CACzClB,KAAM,cACNC,QAASiB,GCE+BC,CAAeD,KACjDE,EAAa,SAACF,GAAD,OAAYxB,EDAD,SAACwB,GAAD,MAAa,CAC3ClB,KAAM,cACNC,QAASiB,GCF+BG,CAAiBH,KAEzD,OACE,6BACE,wBAAIV,UAAU,aACXM,EAAMQ,KAAI,SAAC9B,GAAD,OACT,wBAAI+B,IAAK/B,EAAKY,IACZ,2BACEJ,KAAK,WACLwB,QAAShC,EAAKiC,KACdd,SAAUM,EAAWS,KAAK,KAAMlC,EAAKY,MAJzC,OAOE,0BAAMI,UAAWhB,EAAKiC,KAAO,OAAS,MAAOjC,EAAKc,MAClD,0BACEE,UAAU,gBACVmB,QAASP,EAAWM,KAAK,KAAMlC,EAAKY,KAFtC,Y,sBCtBNwB,EAAY,CAChBd,MAAO,CACL,CACEV,GAAIC,cACJC,KAAM,aACNmB,MAAM,GAER,CACErB,GAAIC,cACJC,KAAM,cACNmB,MAAM,KA6BGI,EAxBC,WAAgC,IAA/Bb,EAA8B,uDAAtBY,EAAWE,EAAW,uCAC7C,OAAQA,EAAO9B,MACb,IAAK,WACH,OAAO,2BACFgB,GADL,IAEEF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBgB,EAAO7B,YAEnC,IAAK,cACH,OAAO,2BACFe,GADL,IAEEF,MAAOE,EAAMF,MAAMQ,KAAI,SAAC9B,GAAD,OACrBA,EAAKY,KAAO0B,EAAO7B,QAAnB,2BAAkCT,GAAlC,IAAwCiC,MAAOjC,EAAKiC,OAASjC,OAGnE,IAAK,cACH,OAAO,2BACFwB,GADL,IAEEF,MAAOE,EAAMF,MAAMiB,QAAO,SAACvC,GAAD,OAAUA,EAAKY,KAAO0B,EAAO7B,aAE3D,QACE,OAAOe,IC3BPgB,EAAQC,YAAYJ,GAcXK,MAZf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,yBAAKxB,UAAU,QACb,uBAAGA,UAAU,YAAb,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cfedb5c0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAction } from \"../store/Actions\";\n\nconst ToDo = () => {\n  const [todo, setTodo] = useState(\"\");\n  const dispatch = useDispatch();\n  const addTodo = (todo) => dispatch(addTodoAction(todo));\n\n  const onChange = (e) => {\n    setTodo(e.target.value);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (todo.trim() === \"\") return;\n    addTodo({\n      id: uuid(),\n      name: todo,\n      complete: false,\n    });\n    setTodo(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className=\"form-div\">\n        <input\n          type=\"text\"\n          name=\"todo\"\n          placeholder=\"Add a todo\"\n          value={todo}\n          onChange={onChange}\n        />\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ToDo;\n","export const addTodoAction = (todo) => ({\n  type: \"ADD_TODO\",\n  payload: todo,\n});\n\nexport const toggleTodoDone = (todoId) => ({\n  type: \"TOGGLE_TODO\",\n  payload: todoId,\n});\n\nexport const deleteTodoAction = (todoId) => ({\n  type: \"DELETE_TODO\",\n  payload: todoId,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTodoDone, deleteTodoAction } from \"../store/Actions\";\n\nconst List = () => {\n  const todos = useSelector((state) => state.todos);\n\n  const dispatch = useDispatch();\n\n  const toggleTodo = (todoId) => dispatch(toggleTodoDone(todoId));\n  const deleteTodo = (todoId) => dispatch(deleteTodoAction(todoId));\n\n  return (\n    <div>\n      <ul className=\"todo-list\">\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={todo.done}\n              onChange={toggleTodo.bind(null, todo.id)}\n            />\n            &nbsp;\n            <span className={todo.done ? \"done\" : null}>{todo.name}</span>\n            <span\n              className=\"delete-button\"\n              onClick={deleteTodo.bind(null, todo.id)}\n            >\n              x\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default List;\n","import { v4 as uuid } from \"uuid\";\n\nconst initState = {\n  todos: [\n    {\n      id: uuid(),\n      name: \"Do project\",\n      done: true,\n    },\n    {\n      id: uuid(),\n      name: \"Read a book\",\n      done: false,\n    },\n  ],\n};\n\nconst Reducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    case \"TOGGLE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.payload ? { ...todo, done: !todo.done } : todo\n        ),\n      };\n    case \"DELETE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport ToDo from \"./components/ToDo\";\nimport List from \"./components/List\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport Reducer from \"./store/Reducer\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"main\">\n        <p className=\"mainHead\">THINGS TO DO!</p>\n        <ToDo />\n        <List />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}